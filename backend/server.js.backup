console.log('Starting server with safe path-to-regexp wrapper...');

// Load our safe wrapper first
require('./safe-path-to-regexp-wrapper');

const path = require('path');
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const fs = require('fs');
const cookieParser = require('cookie-parser');

// Load environment variables
dotenv.config({ path: path.join(__dirname, '.env') });
const { FilterXSS } = require('xss');
const xss = new FilterXSS({
  whiteList: {}, // empty, means filter out all tags
  stripIgnoreTag: true, // filter out all HTML not in the whitelist
  stripIgnoreTagBody: ['script'] // the script tag is a special case, we need to filter out its content
});

// URL Sanitization Middleware
const sanitizeUrl = (req, res, next) => {
  try {
    // Check for malicious patterns in URL
    const maliciousPatterns = [
      /\/\.\.\//,  // Path traversal
      /\/\//,        // Multiple slashes
      /\\/,          // Backslashes
      /git\.new/,    // git.new URLs
      /pathToRegexpError/  // Error indicator
    ];

    const urlToCheck = req.originalUrl.toLowerCase();
    
    for (const pattern of maliciousPatterns) {
      if (pattern.test(urlToCheck)) {
        console.warn('Blocked potentially malicious URL:', req.originalUrl);
        return res.status(400).json({ 
          status: 'error',
          message: 'Invalid request URL' 
        });
      }
    }
    
    next();
  } catch (error) {
    console.error('Error in URL sanitization:', error);
    res.status(500).json({ 
      status: 'error',
      message: 'Server error during request processing' 
    });
  }
};

// Custom MongoDB sanitization middleware
const sanitizeMongo = (req, res, next) => {
  // Skip if no body or query
  if (!req.body && !req.query) return next();

  // Sanitize request body
  if (req.body) {
    const sanitize = (data) => {
      if (data && typeof data === 'object') {
        Object.keys(data).forEach(key => {
          // Remove $ and . from keys
          if (key.startsWith('$') || key.includes('.')) {
            delete data[key];
          } else if (data[key] && typeof data[key] === 'object') {
            sanitize(data[key]);
          }
        });
      }
      return data;
    };

    req.body = sanitize(req.body);
  }

  // Sanitize query parameters
  if (req.query) {
    const sanitizedQuery = {};
    Object.keys(req.query).forEach(key => {
      if (!key.startsWith('$') && !key.includes('.')) {
        sanitizedQuery[key] = req.query[key];
      }
    });
    req.query = sanitizedQuery;
  }

  next();
};
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const hpp = require('hpp');
const { handleError } = require('./utils/appError');
const { setSecurityHeaders } = require('./middleware/auth');

// Load environment variables from .env file
const envPath = path.resolve(__dirname, '.env');
console.log('Loading .env from:', envPath);
dotenv.config({ path: envPath });

// Debug log environment variables
console.log('Environment Variables:', {
  NODE_ENV: process.env.NODE_ENV,
  PORT: process.env.PORT,
  CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME ? '***' : 'MISSING',
  CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY ? '***' : 'MISSING',
  CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET ? '***' : 'MISSING'
});

const app = express();

// CORS configuration
const corsOptions = {
  // The origin is the URL of the frontend application that is allowed to make requests.
  // We explicitly set it to the standard React development server URL.
  origin: 'http://localhost:3000',
  // Credentials must be true to allow cookies and authorization headers to be sent.
  credentials: true,
  // Explicitly define the HTTP methods that are allowed.
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  // Define the headers that the frontend is allowed to send.
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
};

// Middleware

// Set security headers
app.use(helmet());
app.use(setSecurityHeaders);

// Enable CORS
app.use(cors(corsOptions));

// Body parser, reading data from body into req.body
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Cookie parser
app.use(cookieParser());

// Apply URL sanitization to all routes
app.use(sanitizeUrl);

// Block malformed URLs that cause path-to-regexp errors
app.use((req, res, next) => {
  const url = req.originalUrl || req.url;
  
  // List of known bad patterns
  const badPatterns = [
    /git\.new\/pathToRegexpError/i,
    /\/\/[^\/]+\//,  // Double slashes with text between
    /https?:\/\//i,   // Full URLs
    /\/\.\.\//,      // Path traversal
    /[<>\[\]{}|\^]/   // Suspicious characters
  ];

  // Check if URL matches any bad pattern
  if (badPatterns.some(pattern => pattern.test(url))) {
    console.warn('Blocked suspicious request:', {
      url,
      ip: req.ip,
      headers: req.headers,
      method: req.method
    });
    return res.status(400).send('Invalid request');
  }

  next();
});

// Request logging middleware
app.use((req, res, next) => {
  console.log('\n=== NEW REQUEST ===');
  console.log(`${new Date().toISOString()} ${req.method} ${req.originalUrl}`);
  console.log('Headers:', JSON.stringify(req.headers, null, 2));
  console.log('Query:', req.query);
  console.log('Body:', req.body);
  console.log('=================');
  next();
});

// Debug middleware to log requests
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  console.log('Headers:', req.headers);
  console.log('Body:', req.body);
  next();
});

// Cookie parser
app.use(cookieParser());

// XSS Protection Middleware
app.use((req, res, next) => {
  // Sanitize request body
  if (req.body) {
    // Create a deep copy of the body to avoid modifying the original
    const sanitizeObject = (obj) => {
      if (!obj) return obj;
      
      if (Array.isArray(obj)) {
        return obj.map(item => sanitizeObject(item));
      } else if (typeof obj === 'object') {
        const sanitized = {};
        Object.keys(obj).forEach(key => {
          sanitized[key] = sanitizeObject(obj[key]);
        });
        return sanitized;
      } else if (typeof obj === 'string') {
        return xss.process(obj);
      }
      return obj;
    };
    
    req.body = sanitizeObject(req.body);
  }
  next();
});

// Custom NoSQL injection protection
app.use(sanitizeMongo);

// Prevent parameter pollution (must be after body parsers)
app.use(
  hpp({
    whitelist: [
      'duration',
      'ratingsQuantity',
      'ratingsAverage',
      'maxGroupSize',
      'difficulty',
      'price'
    ]
  })
);

// Rate limiting for API routes
const apiLimiter = rateLimit({
  max: 100, // Limit each IP to 100 requests per windowMs
  windowMs: 15 * 60 * 1000, // 15 minutes
  message: 'Too many requests from this IP, please try again after 15 minutes',
  standardHeaders: true,
  legacyHeaders: false
});

// Apply rate limiting to all API routes
app.use('/api', apiLimiter);

// Request logging middleware
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
  next();
});

// Add request time to the request object
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

// Request logging middleware - Moved after body parser
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl}`);
    if (req.body && typeof req.body === 'object' && Object.keys(req.body).length > 0) {
        console.log('Request body:', JSON.stringify(req.body, null, 2));
    }
    next();
});

// Test route
app.get('/api', (req, res) => {
    res.json({ message: 'API is working!' });
});



// MongoDB Connection
const mongoURI = process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/portfolioDB';

// Connection options
const mongoOptions = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000,
};

// Connect to MongoDB
mongoose.connect(mongoURI, mongoOptions)
  .then(() => console.log('MongoDB connected successfully'))
  .catch(err => console.error('MongoDB connection error:', err));

// Get the default connection
const db = mongoose.connection;

// Event listeners for MongoDB connection
db.on('error', (err) => {
  console.error('MongoDB connection error:', err);
});

db.once('open', () => {
  console.log('MongoDB connected to:', mongoURI);
});

db.on('disconnected', () => {
  console.log('MongoDB disconnected');});

// Handle application termination
process.on('SIGINT', () => {
  mongoose.connection.close(() => {
    console.log('MongoDB connection closed due to app termination');
    process.exit(0);
  });
});

let server;

// Import routes
const authRouter = require('./routes/auth');
const projectsRouter = require('./routes/projects');
const testimonialsRouter = require('./routes/testimonials');
const internshipsRouter = require('./routes/internships');
const applicationsRouter = require('./routes/applications');
const uploadRouter = require('./routes/upload');
const contactRouter = require('./routes/contact');
const analyticsRouter = require('./routes/analytics');
const eventsRouter = require('./routes/events');

// Debug: Print all registered routes
const printRoutes = (router, prefix = '') => {
  router.stack.forEach((middleware) => {
    if (middleware.route) {
      // Routes registered directly on the app
      console.log(`[ROUTE] ${Object.keys(middleware.route.methods).join(', ').toUpperCase()} ${prefix}${middleware.route.path}`);
    } else if (middleware.name === 'router' || middleware.name === 'router') {
      // Router middleware
      const path = middleware.regexp.toString()
        .replace('/^', '')
        .replace('\\/?', '')
        .replace('(?=\\/|$)', '')
        .replace(/\/(?:([^\/]+?))\//g, ':$1/');
      
      middleware.handle.stack.forEach((handler) => {
        if (handler.route) {
          console.log(`[ROUTE] ${Object.keys(handler.route.methods).join(', ').toUpperCase()} ${prefix}${path}${handler.route.path}`);
        }
      });
    }
  });
};

// Mount API routes with logging
const apiRoutes = [
  { path: '/api/auth', router: authRouter },
  { path: '/api/projects', router: projectsRouter },
  { path: '/api/testimonials', router: testimonialsRouter },
  { path: '/api/internships', router: internshipsRouter },
  { path: '/api/applications', router: applicationsRouter },
  { path: '/api/upload', router: uploadRouter },
  { path: '/api/contact', router: contactRouter },
  { path: '/api/analytics', router: analyticsRouter },
  { path: '/api/events', router: eventsRouter }
];

apiRoutes.forEach(route => {
  console.log(`\nMounting routes for: ${route.path}`);
  app.use(route.path, route.router);
  printRoutes(route.router, route.path);
});

// Serve static assets from build directory
const buildPath = path.join(__dirname, '../build');

if (fs.existsSync(buildPath)) {
  console.log('Serving static files from:', buildPath);
  
  // Serve static files from the React app
  app.use(express.static(buildPath, {
    // Don't redirect to / if the file isn't found
    redirect: false,
    // Don't set any special headers
    setHeaders: (res) => {
      res.set('X-Content-Type-Options', 'nosniff');
    }
  }));

  // Only serve index.html for non-API routes and non-static file requests
  app.get('*', (req, res, next) => {
    try {
      // Skip API routes
      if (req.path.startsWith('/api/')) {
        return next();
      }
      
      // Skip static file requests (anything with a file extension)
      if (req.path.includes('.') && !req.path.endsWith('/')) {
        return next();
      }
      
      // For all other routes, serve index.html
      const indexPath = path.join(buildPath, 'index.html');
      
      // Check if index.html exists
      if (!fs.existsSync(indexPath)) {
        console.error('index.html not found at:', indexPath);
        return res.status(500).send('Application not built properly');
      }
      
      res.sendFile(indexPath, (err) => {
        if (err) {
          console.error('Error sending index.html:', err);
          if (!res.headersSent) {
            res.status(500).send('Error loading the application');
          }
        }
      });
    } catch (error) {
      console.error('Error in catch-all route handler:', error);
      if (!res.headersSent) {
        res.status(500).json({
          status: 'error',
          message: 'Internal server error',
          error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
      }
    }
  });

  // Serve static files from the static directory
  app.use('/static', express.static(path.join(buildPath, 'static')));

  // Serve static files from the public directory if it exists
  const publicPath = path.join(__dirname, '../public');
  if (fs.existsSync(publicPath)) {
    app.use(express.static(publicPath));
    if (fs.existsSync(path.join(publicPath, 'assets'))) {
      app.use('/assets', express.static(path.join(publicPath, 'assets')));
    }
  }
  
  // Handle React routing - serve index.html for all non-API routes
  app.get('*', (req, res, next) => {
    try {
      // Debug: Log the incoming request
      console.log('Incoming request:', {
        method: req.method,
        path: req.path,
        originalUrl: req.originalUrl,
        headers: req.headers
      });

      // Skip API routes
      if (req.path.startsWith('/api/')) {
        console.log('Skipping API route:', req.path);
        return next();
      }
      
      // Skip static files
      if (req.path.includes('.')) {
        console.log('Skipping static file:', req.path);
        return next();
      }
      
      console.log('Handling client-side route:', req.path);
      
      // Ensure the path is safe to use
      const safePath = path.normalize(req.path).replace(/^(\/\/+|\\+|\.\.\/)/g, '');
      const filePath = path.join(buildPath, 'index.html');
      
      console.log('Sending file:', filePath);
      
      res.sendFile(filePath, (err) => {
        if (err) {
          console.error('Error sending file:', err);
          res.status(500).send('Error loading the application');
        }
      });
    } catch (error) {
      console.error('Error in catch-all route handler:', error);
      next(error);
    }
  });
} else {
  console.warn('Build directory not found. Make sure to build the frontend with `npm run build`');
}

// Handle 404 for API routes
app.use('/api/*', (req, res) => {
  res.status(404).json({
    status: 'error',
    message: `Can't find ${req.originalUrl} on this server!`
  });
});

// Global error handler for uncaught exceptions in routes
process.on('uncaughtException', (error) => {
  console.error('\n=== UNCAUGHT EXCEPTION ===');
  console.error(error);
  console.error('Stack:', error.stack);
  console.error('=======================');
  process.exit(1);
});

// Global handler for unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('\n=== UNHANDLED REJECTION ===');
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  console.error('Stack:', reason?.stack);
  console.error('=========================');
});

// Special error handler for path-to-regexp errors
app.use((err, req, res, next) => {
  if (err instanceof TypeError && err.message.includes('Missing parameter name at')) {
    console.error('Path-to-regexp error:', {
      url: req.originalUrl,
      method: req.method,
      headers: req.headers,
      error: err.message,
      stack: err.stack
    });
    return res.status(400).json({
      status: 'error',
      message: 'Invalid URL format',
      details: 'The requested URL contains invalid characters or format'
    });
  }
  next(err);
});

// Main error handling middleware (must be after all other middleware and routes)
app.use((err, req, res, next) => {
  console.error('\n=== ERROR HANDLER ===');
  console.error('Error:', err);
  console.error('URL:', req.originalUrl);
  console.error('Method:', req.method);
  console.error('Headers:', req.headers);
  console.error('Body:', req.body);
  console.error('Stack:', err.stack);
  console.error('==================');
  console.error('Error:', err);
  
  // Default error status and message
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';
  
  // Handle specific error types
  if (err.name === 'CastError') {
    return res.status(400).json({
      status: 'error',
      message: `Invalid ${err.path}: ${err.value}`
    });
  }
  
  // Handle duplicate field errors
  if (err.code === 11000) {
    const value = err.errmsg.match(/(["'])(\\.|[^\\])*?\1/)[0];
    const message = `Duplicate field value: ${value}. Please use another value!`;
    return res.status(400).json({
      status: 'error',
      message: message
    });
  }
  
  // Handle validation errors
  if (err.name === 'ValidationError') {
    const errors = Object.values(err.errors).map(el => el.message);
    return res.status(400).json({
      status: 'error',
      message: `Invalid input data. ${errors.join('. ')}`
    });
  }
  
  // Send error response
  res.status(err.statusCode).json({
    status: err.status,
    message: err.message,
    errors: err.errors || undefined,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('UNHANDLED REJECTION! 💥 Shutting down...');
  console.error(err.name, err.message);
  if (server) {
    server.close(() => {
      process.exit(1);
    });
  } else {
    process.exit(1);
  }
});

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
  console.error('UNCAUGHT EXCEPTION! 💥 Shutting down...');
  console.error(err.name, err.message);
  process.exit(1);
});

// Start the server only if this file is run directly (not when imported for tests)
if (require.main === module) {
  const PORT = process.env.PORT || 5000;
  
  // Start the server after MongoDB connection is established
  db.once('open', () => {
    server = app.listen(PORT, () => {
      console.log(`Server running in ${process.env.NODE_ENV || 'development'} mode on port ${PORT}`);
      console.log(`MongoDB connected: ${mongoURI}`);
    });
  });

  // Handle server errors
  server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
      console.error(`Port ${PORT} is already in use`);
    } else {
      console.error('Server error:', error);
    }
    process.exit(1);
  });
}
